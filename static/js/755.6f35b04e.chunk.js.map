{"version":3,"file":"static/js/755.6f35b04e.chunk.js","mappings":"oPAmBWA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,UCZPG,EAAiB,WAG5B,OAFqBC,EAAAA,EAAAA,IAAYC,EAAAA,GAAzBC,UAqCN,UAACC,EAAA,EAAD,CACEC,QAAS,OACTC,cAAe,SACfC,GAAI,EACJC,SAAU,IACVC,aAAY,oBAAeC,EAAAA,EAAAA,UAC3BC,GAAI,EANN,WAQE,4CACCC,EAAAA,mBAAAA,KAAuB,YAAgC,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACzC,OACE,UAACX,EAAA,EAAD,YACE,SAACA,EAAA,EAAD,CAAOY,GAAI,KAAMT,GAAI,EAArB,SACGM,KAEH,SAACT,EAAA,EAAD,CAAOY,GAAI,IAAKT,GAAI,EAApB,SACGO,KAEH,SAACV,EAAA,EAAD,CAAOY,GAAI,KAAMT,GAAI,EAArB,SACGQ,EAAME,KAAI,SAAAC,GACT,OACE,SAACd,EAAA,EAAD,CAAOY,GAAI,KAAMT,GAAI,EAArB,SACGW,GAD0B5B,IAIhC,QAdOuB,EAkBf,KAED,SAACT,EAAA,EAAD,CAAOY,GAAI,KAAMT,GAAI,QAjEvB,UAACH,EAAA,EAAD,CACEC,QAAS,OACTC,cAAe,SACfC,GAAI,EACJC,SAAU,IACVC,aAAY,oBAAeC,EAAAA,EAAAA,MAC3BC,GAAI,EANN,WAQE,4CACCC,EAAAA,mBAAAA,KAAuB,YAAgC,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACzC,OACE,UAACX,EAAA,EAAD,YACE,SAACA,EAAA,EAAD,CAAOY,GAAI,KAAMT,GAAI,EAArB,SACGM,KAEH,SAACT,EAAA,EAAD,CAAOY,GAAI,IAAKT,GAAI,EAApB,SACGO,KAEH,SAACV,EAAA,EAAD,CAAOY,GAAI,KAAMT,GAAI,EAArB,SACGQ,EAAME,KAAI,SAAAC,GACT,OACE,SAACd,EAAA,EAAD,CAAOY,GAAI,KAAMT,GAAI,EAArB,SACGW,GAD0B5B,IAIhC,QAdOuB,EAkBf,KAED,SAACT,EAAA,EAAD,CAAOY,GAAI,KAAMT,GAAI,MAqC1B,C,+EC/EM,IAAMK,EAAqB,CAChC,CACEC,MAAO,2BACPC,QAAS,uBACTC,MAAO,CACL,sDACA,+CACA,4CACA,yCACA,yBACA,mDACA,mC","sources":["../node_modules/nanoid/index.browser.js","components/WorkExperience/WorkExperience.jsx","components/WorkExperience/workExperienceList.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { Boxes } from 'Theme/Boxes';\nimport { WorkExperienceList } from './workExperienceList';\nimport colors from 'Theme/colors';\nimport { useSelector } from 'react-redux';\nimport { darkThemeSelector } from 'redux/Selectors/darkThemeSelector';\nimport { nanoid } from 'nanoid';\n\nexport const WorkExperience = () => {\n  const { darkMode } = useSelector(darkThemeSelector);\n\n  return !darkMode ? (\n    <Boxes\n      display={'flex'}\n      flexDirection={'column'}\n      mt={4}\n      maxWidth={600}\n      borderBottom={`2px solid ${colors.body}`}\n      pb={4}\n    >\n      <h2>Work Experience</h2>\n      {WorkExperienceList.map(({ title, dateDue, lists }) => {\n        return (\n          <Boxes key={title}>\n            <Boxes as={'h3'} mt={2}>\n              {title}\n            </Boxes>\n            <Boxes as={'p'} mt={2}>\n              {dateDue}\n            </Boxes>\n            <Boxes as={'ul'} mt={2}>\n              {lists.map(list => {\n                return (\n                  <Boxes as={'li'} mt={1} key={nanoid()}>\n                    {list}\n                  </Boxes>\n                );\n              })}\n            </Boxes>\n          </Boxes>\n        );\n      })}\n\n      <Boxes as={'ul'} mt={2}></Boxes>\n    </Boxes>\n  ) : (\n    <Boxes\n      display={'flex'}\n      flexDirection={'column'}\n      mt={4}\n      maxWidth={600}\n      borderBottom={`2px solid ${colors.eliphant}`}\n      pb={4}\n    >\n      <h2>Work Experience</h2>\n      {WorkExperienceList.map(({ title, dateDue, lists }) => {\n        return (\n          <Boxes key={title}>\n            <Boxes as={'h3'} mt={2}>\n              {title}\n            </Boxes>\n            <Boxes as={'p'} mt={2}>\n              {dateDue}\n            </Boxes>\n            <Boxes as={'ul'} mt={2}>\n              {lists.map(list => {\n                return (\n                  <Boxes as={'li'} mt={1} key={nanoid()}>\n                    {list}\n                  </Boxes>\n                );\n              })}\n            </Boxes>\n          </Boxes>\n        );\n      })}\n\n      <Boxes as={'ul'} mt={2}></Boxes>\n    </Boxes>\n  );\n};\n","export const WorkExperienceList = [\n  {\n    title: 'Sea Navigator World-Wide',\n    dateDue: 'June 2012 - May 2022',\n    lists: [\n      '● Navigation vessel in World Wide trading area',\n      '● Communication with foreign countries.',\n      '● Preparation pre-arrival documents.',\n      '● Active messaging with agencies.',\n      '● Safety officer.',\n      '● Working in offshore wind-energy projects.',\n      '● Cyber Security Officer.',\n    ],\n  },\n];\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","WorkExperience","useSelector","darkThemeSelector","darkMode","Boxes","display","flexDirection","mt","maxWidth","borderBottom","colors","pb","WorkExperienceList","title","dateDue","lists","as","map","list"],"sourceRoot":""}